---
layout:     post
title:      "Session和Cookie的区别与联系"
subtitle:   ""
date:       2016-03-12 13:00:00
author:     "HLF"
header-img: "img/post-bg-e2e-ux.jpg"
header-mask: 0.3
catalog:    true
tags:
    - php
    - session
    - cookie

---

>在非常多时候，我们需要跟踪用户在整个网站的活动，对他们身份进行自动或半
自动的识别（也就是平时常说的网站登陆之类的功能）。而HTTP协议本身是无状态的，每一次请求之间都是独立的，无法做到这点，这个时候，我们就要采用Session和Cookie来进行跟踪和判断。本文主要讨论的是Session和Cookie的区别与联系。


### 简单了解一下Session和Cookie的基本概念

* Cookie最早是网景公司的前雇员Lou Montulli在1993年3月的发明。Cookie是由服务器端生成，发送给User-Agent（一般是浏览器），浏览器会将Cookie的key/value保存到某个目录下的文本文件内，下次请求同一网站时就发送该Cookie给服务器（前提是浏览器设置为启用cookie）。Cookie名称和值可以由服务器端定义，这样服务器可以知道该用户是否合法用户以及是否需要重新登录等。

* Session是一种服务器端的机制，每一个网站访客都会被分配给一个唯一的标志符,即会话ID,PHP的会话机制是通过设置Cookie,在Cookie中保存会话id(Session ID),在服务器端会生成与会员ID对应的Session文件,与用户进行关联,Web应用程序存储与这些Session相关的数据,并在各页面间进行传递.



### Session和Cookie的区别与联系

举一个日常中的例子，就能简单明白了。

比如理发店有优惠，满十次洗剪吹免费送一次洗剪吹，这时就需要某种方式来纪录某位顾客的消费数量。
 
1. 该店的店员很厉害，能记住每位顾客的消费数量，只要顾客一走进店，店员就知道该怎么对待了。*这种做法相当于协议本身支持状态。然而HTTP协议不支持。*

2. 发给顾客会员卡，上面记录着消费的数量，一般还有个有效期限。每次消费时，如果顾客出示这张卡片，则此次消费就会与以前或以后的消费相联系起来。*这种做法就是在客户端保持状态，类似Cookie。*

3. 发给顾客会员卡，除了卡号之外什么信息也不纪录，每次消费时，如果顾客出示该卡片，则店员在店里的纪录本/电脑上找到这个卡号对应的纪录添加一些消费信息。*这种做法就是在服务器端保持状态，类似Session。*



在PHP开发中,对比起Cookie，Session是存储在服务器端，相对安全，并且不像 Cookie 那样有存储长度限制。

由于 Session 是以文本文件形式存储在服务器端的，所以不怕客户端修改 Session 内容。实际上在服务器端的 Session 文件，PHP自动修改session文件的权限，只保留了系统读和写权限，而且不能通过ftp修改，所以安全得多。

对于 Cookie 来说，假设我们要验证用户是否登陆，就必须在 Cookie 中保存用户名和密码(可能是 md5 加密后字符串)，并在每次请求页面的时候进行验证。如果用户名和密码存储在数据库，每次都要执行一次数据库查询，给数据库造成多余的负担。因为我们并不能只做一次验证。为什么呢?因为客户端 Cookie 中的信息是有可能被修改的。假如你存储 $admin 变量来表示用户是否登陆，$admin 为 true 的时候表示登陆，为 false 的时候表示未登录，在第一次通过验证后将 $admin 等于 true 存储在 Cookie，下次就不用验证了，这样对么?错了，假如有人伪造一个值为 true 的 $admin 变量那不是就立即取的了管理权限么?这样非常的不安全。

而 Session 就不同了，Session 是存储在服务器端的，远程用户没办法修改 Ｓession文件的内容，因此可以单纯存储一个 $admin 变量来判断是否登陆，首次验证通过后设置 $admin 值为 true，以后判断该值是否为 true，假如不是，转入登陆界面，这样就可以减少很多数据库操作了。而且可以减少每次为了验证 Cookie 而传递密码的不安全性了(session 验证只需要传递一次，假如你没有使用 SSL 安全协议的话)。即使密码进行了 md5 加密，也是很容易被截获的。

**注意：** 
	
在谈论session机制的时候，常常听到这样一种误解“只要关闭浏览器，session就消失了”。其实可以想象一下上面会员卡的例子，除非顾客主动对店家提出销卡，否则店家绝对不会轻易删除顾客的资料。对Session来说也是一样的，除非程序通知服务器删除一个Session，否则服务器会一直保留，程序一般都是在用户做注销/登出的时候发个指令去删除session。	然而浏览器从来不会主动在关闭之前通知服务器它将要关闭，因此服务器根本不会有机会知道浏览器已经关闭，之所以会有这种错觉，是大部分session机制都使用会话cookie来保存session id，而关闭浏览器后这个 session id就消失了，再次连接服务器时也就无法找到原来的session。

如果服务器设置的cookie被保存到硬盘上，或者使用某种手段改写浏览器发出的HTTP请求头，把原来的Session id发送给服务器，则再次打开浏览器仍然能够找到原来的session。

也正是由于关闭浏览器不会导致session被删除，迫使服务器为保证安全性，为Session设置了一个失效时间，当距离客户端上一次使用session的时间超过这个失效时间时，服务器就可以认为客户端已经停止了活动，才会把session删除以节省存储空间。

	

